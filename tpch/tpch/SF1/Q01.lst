--####################################################################
--# Pricing Summary Report Query (Q1)
--####################################################################

--# This query reports the amount of business 
--# that was billed, shipped, and returned.

--###############################
--# Business Question
--###############################

--# The Pricing Summary Report Query provides a summary pricing report 
--# for all lineitems shipped as of a given date. 
--# The date is within 60 - 120 days of the greatest ship date 
--# contained in the database. 
--# The query lists totals for extended price, discounted extended price,
--#  discounted extended price plus tax, average quantity, 
--# average extended price, and average discount. 
--# These aggregates are grouped by RETURNFLAG and LINESTATUS, 
--# and listed in ascending order of RETURNFLAG and LINESTATUS. 
--# A count of the number of lineitems in each group is included.

\explain plan
select
    l_returnflag,
    l_linestatus,
    sum(l_quantity) as sum_qty,
    sum(l_extendedprice) as sum_base_price,
    ROUND(sum(l_extendedprice*(1-l_discount)), 2) as sum_disc_price,
    ROUND(sum(l_extendedprice*(1-l_discount)*(1+l_tax)), 2) as sum_charge,
    ROUND(avg(l_quantity),2) as avg_qty,
    ROUND(avg(l_extendedprice),2) as avg_price,
    ROUND(avg(l_discount),2) as avg_disc,
    count(*) as count_order
from
    lineitem
where
    l_shipdate <= date '1998-12-01' - interval '90' day
group by
    l_returnflag,
    l_linestatus
order by
    l_returnflag,
    l_linestatus;

L_RETURNFLAG L_LINESTATUS  SUM_QTY  SUM_BASE_PRICE  SUM_DISC_PRICE
------------ ------------ -------- --------------- ---------------
    SUM_CHARGE AVG_QTY AVG_PRICE AVG_DISC COUNT_ORDER
-------------- ------- --------- -------- -----------
A            F            37734107  56586554400.73  53758257134.87
55909065222.83   25.52  38273.13      .05     1478493
N            F              991417   1487504710.38   1413082168.05
 1469649223.19   25.52  38284.47      .05       38854
N            O            74476040 111701729697.74 106118230307.61
110367043872.5    25.5  38249.12      .05     2920374
R            F            37719753   56568041380.9   53741292684.6
55889619119.83   25.51  38250.85      .05     1478870

4 rows selected.

>>>  start print plan

< Execution Plan >
==================================================================================================
|  IDX  |  NODE DESCRIPTION                                            |                    ROWS |
--------------------------------------------------------------------------------------------------
|    0  |  SELECT STATEMENT                                            |                       4 |
|    1  |    QUERY BLOCK ("$QB_IDX_2")                                 |                       4 |
|    2  |      SORT INSTANT                                            |                       4 |
|    3  |        SINGLE CLUSTER                                        | LOCAL/REMOTE          4 |
|    4  |          SELECT STATEMENT                                    |                       4 |
|    5  |            QUERY BLOCK ("$QB_IDX_2")                         |                       4 |
|    6  |              GROUP HASH INSTANT                              |                       4 |
|    7  |                TABLE ACCESS ("LINEITEM" AS _A1)              |                 2968590 |
==================================================================================================

     1  -  TARGET : LINEITEM.L_RETURNFLAG, LINEITEM.L_LINESTATUS, SUM( LINEITEM.L_QUANTITY ) AS SUM_QTY, SUM( LINEITEM.L_EXTENDEDPRICE ) AS SUM_BASE_PRICE, ROUND(SUM( LINEITEM.L_EXTENDEDPRICE * ( 1 - LINEITEM.L_DISCOUNT ) ),2) AS SUM_DISC_PRICE, ROUND(SUM( ( LINEITEM.L_EXTENDEDPRICE * ( 1 - LINEITEM.L_DISCOUNT ) ) * ( 1 + LINEITEM.L_TAX ) ),2) AS SUM_CHARGE, ROUND(SUM( LINEITEM.L_QUANTITY ) / COUNT( LINEITEM.L_QUANTITY ),2) AS AVG_QTY, ROUND(SUM( LINEITEM.L_EXTENDEDPRICE ) / COUNT( LINEITEM.L_EXTENDEDPRICE ),2) AS AVG_PRICE, ROUND(SUM( LINEITEM.L_DISCOUNT ) / COUNT( LINEITEM.L_DISCOUNT ),2) AS AVG_DISC, COUNT(*) AS COUNT_ORDER
     2  -  SORT KEY : "LINEITEM.L_RETURNFLAG ASC NULLS LAST", "LINEITEM.L_LINESTATUS ASC NULLS LAST"
           RECORD COLUMN : SUM( LINEITEM.L_QUANTITY ), SUM( LINEITEM.L_EXTENDEDPRICE ), ROUND(SUM( LINEITEM.L_EXTENDEDPRICE * ( 1 - LINEITEM.L_DISCOUNT ) ),2), ROUND(SUM( ( LINEITEM.L_EXTENDEDPRICE * ( 1 - LINEITEM.L_DISCOUNT ) ) * ( 1 + LINEITEM.L_TAX ) ),2), ROUND(SUM( LINEITEM.L_QUANTITY ) / COUNT( LINEITEM.L_QUANTITY ),2), ROUND(SUM( LINEITEM.L_EXTENDEDPRICE ) / COUNT( LINEITEM.L_EXTENDEDPRICE ),2), ROUND(SUM( LINEITEM.L_DISCOUNT ) / COUNT( LINEITEM.L_DISCOUNT ),2), COUNT(*)
           READ KEY COLUMN : LINEITEM.L_RETURNFLAG, LINEITEM.L_LINESTATUS
           READ RECORD COLUMN : SUM( LINEITEM.L_QUANTITY ), SUM( LINEITEM.L_EXTENDEDPRICE ), ROUND(SUM( LINEITEM.L_EXTENDEDPRICE * ( 1 - LINEITEM.L_DISCOUNT ) ),2), ROUND(SUM( ( LINEITEM.L_EXTENDEDPRICE * ( 1 - LINEITEM.L_DISCOUNT ) ) * ( 1 + LINEITEM.L_TAX ) ),2), ROUND(SUM( LINEITEM.L_QUANTITY ) / COUNT( LINEITEM.L_QUANTITY ),2), ROUND(SUM( LINEITEM.L_EXTENDEDPRICE ) / COUNT( LINEITEM.L_EXTENDEDPRICE ),2), ROUND(SUM( LINEITEM.L_DISCOUNT ) / COUNT( LINEITEM.L_DISCOUNT ),2), COUNT(*)
     3  -  SQL : SELECT /*+ USE_GROUP_HASH(6) FULL( _A1 ) */ "_A1"."L_RETURNFLAG", "_A1"."L_LINESTATUS", SUM( "_A1"."L_QUANTITY" ), SUM( "_A1"."L_EXTENDEDPRICE" ), SUM( "_A1"."L_EXTENDEDPRICE" * (:_V0 - "_A1"."L_DISCOUNT") ), SUM( ("_A1"."L_EXTENDEDPRICE" * (:_V0 - "_A1"."L_DISCOUNT")) * (:_V0 + "_A1"."L_TAX") ), COUNT( "_A1"."L_QUANTITY" ), COUNT( "_A1"."L_EXTENDEDPRICE" ), SUM( "_A1"."L_DISCOUNT" ), COUNT( "_A1"."L_DISCOUNT" ), COUNT(*) FROM "PUBLIC"."LINEITEM"@LOCAL AS "_A1" WHERE "_A1"."L_SHIPDATE" <= :_V3 GROUP BY "_A1"."L_RETURNFLAG", "_A1"."L_LINESTATUS"
           TARGET DOMAIN : G1(G1N1) 4 rows, G2(G2N1) 4 rows
           RE-GROUPING
             GROUP KEY : LINEITEM.L_RETURNFLAG, LINEITEM.L_LINESTATUS
             AGGREGATION : SUM( SUM( LINEITEM.L_QUANTITY ) ), SUM( SUM( LINEITEM.L_EXTENDEDPRICE ) ), SUM( SUM( LINEITEM.L_EXTENDEDPRICE * ( 1 - LINEITEM.L_DISCOUNT ) ) ), SUM( SUM( ( LINEITEM.L_EXTENDEDPRICE * ( 1 - LINEITEM.L_DISCOUNT ) ) * ( 1 + LINEITEM.L_TAX ) ) ), SUM( COUNT( LINEITEM.L_QUANTITY ) ), SUM( COUNT( LINEITEM.L_EXTENDEDPRICE ) ), SUM( SUM( LINEITEM.L_DISCOUNT ) ), SUM( COUNT( LINEITEM.L_DISCOUNT ) ), SUM( COUNT(*) )
     5  -  TARGET : _A1.L_RETURNFLAG, _A1.L_LINESTATUS, SUM( _A1.L_QUANTITY ), SUM( _A1.L_EXTENDEDPRICE ), SUM( _A1.L_EXTENDEDPRICE * ( :_V0 - _A1.L_DISCOUNT ) ), SUM( ( _A1.L_EXTENDEDPRICE * ( :_V0 - _A1.L_DISCOUNT ) ) * ( :_V0 + _A1.L_TAX ) ), COUNT( _A1.L_QUANTITY ), COUNT( _A1.L_EXTENDEDPRICE ), SUM( _A1.L_DISCOUNT ), COUNT( _A1.L_DISCOUNT ), COUNT(*)
     6  -  GROUP KEY : _A1.L_RETURNFLAG, _A1.L_LINESTATUS
           RECORD COLUMN : SUM( _A1.L_QUANTITY ), SUM( _A1.L_EXTENDEDPRICE ), SUM( _A1.L_EXTENDEDPRICE * ( :_V0 - _A1.L_DISCOUNT ) ), SUM( ( _A1.L_EXTENDEDPRICE * ( :_V0 - _A1.L_DISCOUNT ) ) * ( :_V0 + _A1.L_TAX ) ), COUNT( _A1.L_QUANTITY ), COUNT( _A1.L_EXTENDEDPRICE ), SUM( _A1.L_DISCOUNT ), COUNT( _A1.L_DISCOUNT ), COUNT(*)
           READ KEY COLUMN : _A1.L_RETURNFLAG, _A1.L_LINESTATUS
           READ RECORD COLUMN : SUM( _A1.L_QUANTITY ), SUM( _A1.L_EXTENDEDPRICE ), SUM( _A1.L_EXTENDEDPRICE * ( :_V0 - _A1.L_DISCOUNT ) ), SUM( ( _A1.L_EXTENDEDPRICE * ( :_V0 - _A1.L_DISCOUNT ) ) * ( :_V0 + _A1.L_TAX ) ), COUNT( _A1.L_QUANTITY ), COUNT( _A1.L_EXTENDEDPRICE ), SUM( _A1.L_DISCOUNT ), COUNT( _A1.L_DISCOUNT ), COUNT(*)
     7  -  HASH SHARD ( # 3 ) 
           READ COLUMN : _A1.L_QUANTITY, _A1.L_EXTENDEDPRICE, _A1.L_DISCOUNT, _A1.L_TAX, _A1.L_RETURNFLAG, _A1.L_LINESTATUS, _A1.L_SHIPDATE
             PHYSICAL FILTER : _A1.L_SHIPDATE <= :_V3

<<<  end print plan



--###############################
--# Functional Query Definition
--###############################

\set linesize 400
\set timing on;

--# result: 4 rows
--#  l_returnflag | l_linestatus |   sum_qty   | sum_base_price  | sum_disc_price  |   sum_charge    | avg_qty | avg_price | avg_disc | count_order 
--# --------------+--------------+-------------+-----------------+-----------------+-----------------+---------+-----------+----------+-------------
--#  A            | F            | 37734107.00 |  56586554400.73 |  53758257134.87 |  55909065222.83 |   25.52 |  38273.13 |     0.05 |     1478493
--#  N            | F            |   991417.00 |   1487504710.38 |   1413082168.05 |   1469649223.19 |   25.52 |  38284.47 |     0.05 |       38854
--#  N            | O            | 74476040.00 | 111701729697.74 | 106118230307.61 | 110367043872.50 |   25.50 |  38249.12 |     0.05 |     2920374
--#  R            | F            | 37719753.00 |  56568041380.90 |  53741292684.60 |  55889619119.83 |   25.51 |  38250.85 |     0.05 |     1478870

\explain plan
select
    l_returnflag,
    l_linestatus,
    sum(l_quantity) as sum_qty,
    sum(l_extendedprice) as sum_base_price,
    ROUND(sum(l_extendedprice*(1-l_discount)), 2) as sum_disc_price,
    ROUND(sum(l_extendedprice*(1-l_discount)*(1+l_tax)), 2) as sum_charge,
    ROUND(avg(l_quantity),2) as avg_qty,
    ROUND(avg(l_extendedprice),2) as avg_price,
    ROUND(avg(l_discount),2) as avg_disc,
    count(*) as count_order
from
    lineitem
where
    l_shipdate <= date '1998-12-01' - interval '90' day
group by
    l_returnflag,
    l_linestatus
order by
    l_returnflag,
    l_linestatus;

L_RETURNFLAG L_LINESTATUS  SUM_QTY  SUM_BASE_PRICE  SUM_DISC_PRICE     SUM_CHARGE AVG_QTY AVG_PRICE AVG_DISC COUNT_ORDER
------------ ------------ -------- --------------- --------------- -------------- ------- --------- -------- -----------
A            F            37734107  56586554400.73  53758257134.87 55909065222.83   25.52  38273.13      .05     1478493
N            F              991417   1487504710.38   1413082168.05  1469649223.19   25.52  38284.47      .05       38854
N            O            74476040 111701729697.74 106118230307.61 110367043872.5    25.5  38249.12      .05     2920374
R            F            37719753   56568041380.9   53741292684.6 55889619119.83   25.51  38250.85      .05     1478870

4 rows selected.

>>>  start print plan

< Execution Plan >
==================================================================================================
|  IDX  |  NODE DESCRIPTION                                            |                    ROWS |
--------------------------------------------------------------------------------------------------
|    0  |  SELECT STATEMENT                                            |                       4 |
|    1  |    QUERY BLOCK ("$QB_IDX_2")                                 |                       4 |
|    2  |      SORT INSTANT                                            |                       4 |
|    3  |        SINGLE CLUSTER                                        | LOCAL/REMOTE          4 |
|    4  |          SELECT STATEMENT                                    |                       4 |
|    5  |            QUERY BLOCK ("$QB_IDX_2")                         |                       4 |
|    6  |              GROUP HASH INSTANT                              |                       4 |
|    7  |                TABLE ACCESS ("LINEITEM" AS _A1)              |                 2968590 |
==================================================================================================

     1  -  TARGET : LINEITEM.L_RETURNFLAG, LINEITEM.L_LINESTATUS, SUM( LINEITEM.L_QUANTITY ) AS SUM_QTY, SUM( LINEITEM.L_EXTENDEDPRICE ) AS SUM_BASE_PRICE, ROUND(SUM( LINEITEM.L_EXTENDEDPRICE * ( 1 - LINEITEM.L_DISCOUNT ) ),2) AS SUM_DISC_PRICE, ROUND(SUM( ( LINEITEM.L_EXTENDEDPRICE * ( 1 - LINEITEM.L_DISCOUNT ) ) * ( 1 + LINEITEM.L_TAX ) ),2) AS SUM_CHARGE, ROUND(SUM( LINEITEM.L_QUANTITY ) / COUNT( LINEITEM.L_QUANTITY ),2) AS AVG_QTY, ROUND(SUM( LINEITEM.L_EXTENDEDPRICE ) / COUNT( LINEITEM.L_EXTENDEDPRICE ),2) AS AVG_PRICE, ROUND(SUM( LINEITEM.L_DISCOUNT ) / COUNT( LINEITEM.L_DISCOUNT ),2) AS AVG_DISC, COUNT(*) AS COUNT_ORDER
     2  -  SORT KEY : "LINEITEM.L_RETURNFLAG ASC NULLS LAST", "LINEITEM.L_LINESTATUS ASC NULLS LAST"
           RECORD COLUMN : SUM( LINEITEM.L_QUANTITY ), SUM( LINEITEM.L_EXTENDEDPRICE ), ROUND(SUM( LINEITEM.L_EXTENDEDPRICE * ( 1 - LINEITEM.L_DISCOUNT ) ),2), ROUND(SUM( ( LINEITEM.L_EXTENDEDPRICE * ( 1 - LINEITEM.L_DISCOUNT ) ) * ( 1 + LINEITEM.L_TAX ) ),2), ROUND(SUM( LINEITEM.L_QUANTITY ) / COUNT( LINEITEM.L_QUANTITY ),2), ROUND(SUM( LINEITEM.L_EXTENDEDPRICE ) / COUNT( LINEITEM.L_EXTENDEDPRICE ),2), ROUND(SUM( LINEITEM.L_DISCOUNT ) / COUNT( LINEITEM.L_DISCOUNT ),2), COUNT(*)
           READ KEY COLUMN : LINEITEM.L_RETURNFLAG, LINEITEM.L_LINESTATUS
           READ RECORD COLUMN : SUM( LINEITEM.L_QUANTITY ), SUM( LINEITEM.L_EXTENDEDPRICE ), ROUND(SUM( LINEITEM.L_EXTENDEDPRICE * ( 1 - LINEITEM.L_DISCOUNT ) ),2), ROUND(SUM( ( LINEITEM.L_EXTENDEDPRICE * ( 1 - LINEITEM.L_DISCOUNT ) ) * ( 1 + LINEITEM.L_TAX ) ),2), ROUND(SUM( LINEITEM.L_QUANTITY ) / COUNT( LINEITEM.L_QUANTITY ),2), ROUND(SUM( LINEITEM.L_EXTENDEDPRICE ) / COUNT( LINEITEM.L_EXTENDEDPRICE ),2), ROUND(SUM( LINEITEM.L_DISCOUNT ) / COUNT( LINEITEM.L_DISCOUNT ),2), COUNT(*)
     3  -  SQL : SELECT /*+ USE_GROUP_HASH(6) FULL( _A1 ) */ "_A1"."L_RETURNFLAG", "_A1"."L_LINESTATUS", SUM( "_A1"."L_QUANTITY" ), SUM( "_A1"."L_EXTENDEDPRICE" ), SUM( "_A1"."L_EXTENDEDPRICE" * (:_V0 - "_A1"."L_DISCOUNT") ), SUM( ("_A1"."L_EXTENDEDPRICE" * (:_V0 - "_A1"."L_DISCOUNT")) * (:_V0 + "_A1"."L_TAX") ), COUNT( "_A1"."L_QUANTITY" ), COUNT( "_A1"."L_EXTENDEDPRICE" ), SUM( "_A1"."L_DISCOUNT" ), COUNT( "_A1"."L_DISCOUNT" ), COUNT(*) FROM "PUBLIC"."LINEITEM"@LOCAL AS "_A1" WHERE "_A1"."L_SHIPDATE" <= :_V3 GROUP BY "_A1"."L_RETURNFLAG", "_A1"."L_LINESTATUS"
           TARGET DOMAIN : G1(G1N1) 4 rows, G2(G2N1) 4 rows
           RE-GROUPING
             GROUP KEY : LINEITEM.L_RETURNFLAG, LINEITEM.L_LINESTATUS
             AGGREGATION : SUM( SUM( LINEITEM.L_QUANTITY ) ), SUM( SUM( LINEITEM.L_EXTENDEDPRICE ) ), SUM( SUM( LINEITEM.L_EXTENDEDPRICE * ( 1 - LINEITEM.L_DISCOUNT ) ) ), SUM( SUM( ( LINEITEM.L_EXTENDEDPRICE * ( 1 - LINEITEM.L_DISCOUNT ) ) * ( 1 + LINEITEM.L_TAX ) ) ), SUM( COUNT( LINEITEM.L_QUANTITY ) ), SUM( COUNT( LINEITEM.L_EXTENDEDPRICE ) ), SUM( SUM( LINEITEM.L_DISCOUNT ) ), SUM( COUNT( LINEITEM.L_DISCOUNT ) ), SUM( COUNT(*) )
     5  -  TARGET : _A1.L_RETURNFLAG, _A1.L_LINESTATUS, SUM( _A1.L_QUANTITY ), SUM( _A1.L_EXTENDEDPRICE ), SUM( _A1.L_EXTENDEDPRICE * ( :_V0 - _A1.L_DISCOUNT ) ), SUM( ( _A1.L_EXTENDEDPRICE * ( :_V0 - _A1.L_DISCOUNT ) ) * ( :_V0 + _A1.L_TAX ) ), COUNT( _A1.L_QUANTITY ), COUNT( _A1.L_EXTENDEDPRICE ), SUM( _A1.L_DISCOUNT ), COUNT( _A1.L_DISCOUNT ), COUNT(*)
     6  -  GROUP KEY : _A1.L_RETURNFLAG, _A1.L_LINESTATUS
           RECORD COLUMN : SUM( _A1.L_QUANTITY ), SUM( _A1.L_EXTENDEDPRICE ), SUM( _A1.L_EXTENDEDPRICE * ( :_V0 - _A1.L_DISCOUNT ) ), SUM( ( _A1.L_EXTENDEDPRICE * ( :_V0 - _A1.L_DISCOUNT ) ) * ( :_V0 + _A1.L_TAX ) ), COUNT( _A1.L_QUANTITY ), COUNT( _A1.L_EXTENDEDPRICE ), SUM( _A1.L_DISCOUNT ), COUNT( _A1.L_DISCOUNT ), COUNT(*)
           READ KEY COLUMN : _A1.L_RETURNFLAG, _A1.L_LINESTATUS
           READ RECORD COLUMN : SUM( _A1.L_QUANTITY ), SUM( _A1.L_EXTENDEDPRICE ), SUM( _A1.L_EXTENDEDPRICE * ( :_V0 - _A1.L_DISCOUNT ) ), SUM( ( _A1.L_EXTENDEDPRICE * ( :_V0 - _A1.L_DISCOUNT ) ) * ( :_V0 + _A1.L_TAX ) ), COUNT( _A1.L_QUANTITY ), COUNT( _A1.L_EXTENDEDPRICE ), SUM( _A1.L_DISCOUNT ), COUNT( _A1.L_DISCOUNT ), COUNT(*)
     7  -  HASH SHARD ( # 3 ) 
           READ COLUMN : _A1.L_QUANTITY, _A1.L_EXTENDEDPRICE, _A1.L_DISCOUNT, _A1.L_TAX, _A1.L_RETURNFLAG, _A1.L_LINESTATUS, _A1.L_SHIPDATE
             PHYSICAL FILTER : _A1.L_SHIPDATE <= :_V3

<<<  end print plan


Elapsed time: 2136.73800 ms 


--#################################
--# Report
--#################################

\set timing off;
INSERT INTO TPCH_SF1_REPORT 
       VALUES ( 'SF1_Q01', (:VAR_ELAPSED_TIME__ / 1000), TRUNC( 60 * 60 * 1000 / :VAR_ELAPSED_TIME__, 0 ) );

1 row created.

COMMIT;

Commit complete.

