--####################################################################
--# Forecasting Revenue Change Query (Q6)
--####################################################################

--# This query quantifies the amount of revenue increase 
--# that would have resulted from eliminating certain company-wide 
--# discounts in a given percentage range in a given year. 
--# Asking this type of "what if" query can be used to look for 
--# ways to increase revenues.

--###############################
--# Business Question
--###############################

--# The Forecasting Revenue Change Query considers all the lineitems 
--# shipped in a given year with discounts between DISCOUNT-0.01 
--# and DISCOUNT+0.01. 
--# The query lists the amount by which the total revenue would 
--# have increased if these discounts had been eliminated 
--# for lineitems with l_quantity less than quantity. 
--# Note that the potential revenue increase is equal to the sum 
--# of [l_extendedprice * l_discount] for all lineitems 
--# with discounts and quantities in the qualifying range.

\explain plan
select
    ROUND( sum(l_extendedprice*l_discount), 2) as revenue
from
    lineitem
where
      l_shipdate >= date '1994-01-01'
  and l_shipdate < date '1994-01-01' + interval '1' year
  and l_discount between 0.06 - 0.01 and 0.06 + 0.01
  and l_quantity < 24;

     REVENUE
------------
123141078.23

1 row selected.

>>>  start print plan

< Execution Plan >
==================================================================================================
|  IDX  |  NODE DESCRIPTION                                            |                    ROWS |
--------------------------------------------------------------------------------------------------
|    0  |  SELECT STATEMENT                                            |                       1 |
|    1  |    QUERY BLOCK ("$QB_IDX_2")                                 |                       1 |
|    2  |      SINGLE CLUSTER                                          | LOCAL/REMOTE          1 |
|    3  |        SELECT STATEMENT                                      |                       1 |
|    4  |          QUERY BLOCK ("$QB_IDX_2")                           |                       1 |
|    5  |            TABLE ACCESS ("LINEITEM" AS _A1)                  |                       1 |
==================================================================================================

     1  -  TARGET : ROUND(SUM( LINEITEM.L_EXTENDEDPRICE * LINEITEM.L_DISCOUNT ),2) AS REVENUE
     2  -  SQL : SELECT /*+ FULL( _A1 ) */ SUM( "_A1"."L_EXTENDEDPRICE" * "_A1"."L_DISCOUNT" ) FROM "PUBLIC"."LINEITEM"@LOCAL AS "_A1" WHERE "_A1"."L_QUANTITY" < :_V0 AND "_A1"."L_DISCOUNT" >= :_V1 AND "_A1"."L_DISCOUNT" <= :_V2 AND "_A1"."L_SHIPDATE" < :_V3 AND "_A1"."L_SHIPDATE" >= :_V4
           TARGET DOMAIN : G1(G1N1) 1 rows, G2(G2N1) 1 rows
           RE-AGGREGATION
             AGGREGATION : SUM( SUM( LINEITEM.L_EXTENDEDPRICE * LINEITEM.L_DISCOUNT ) )
     4  -  TARGET : SUM( _A1.L_EXTENDEDPRICE * _A1.L_DISCOUNT )
     5  -  HASH SHARD ( # 3 ) 
           READ COLUMN : _A1.L_QUANTITY, _A1.L_EXTENDEDPRICE, _A1.L_DISCOUNT, _A1.L_SHIPDATE
           AGGREGATION : SUM( _A1.L_EXTENDEDPRICE * _A1.L_DISCOUNT )
             PHYSICAL FILTER : _A1.L_QUANTITY < :_V0 AND _A1.L_DISCOUNT >= :_V1 AND _A1.L_DISCOUNT <= :_V2 AND _A1.L_SHIPDATE < :_V3 AND _A1.L_SHIPDATE >= :_V4

<<<  end print plan



--###############################
--# Functional Query Definition
--###############################

\set linesize 400
\set timing on;

--# result: 1 rows
--#   revenue    
--# --------------
--#  123141078.23
\explain plan
select
    ROUND( sum(l_extendedprice*l_discount), 2) as revenue
from
    lineitem
where
      l_shipdate >= date '1994-01-01'
  and l_shipdate < date '1994-01-01' + interval '1' year
  and l_discount between 0.06 - 0.01 and 0.06 + 0.01
  and l_quantity < 24;

     REVENUE
------------
123141078.23

1 row selected.

>>>  start print plan

< Execution Plan >
==================================================================================================
|  IDX  |  NODE DESCRIPTION                                            |                    ROWS |
--------------------------------------------------------------------------------------------------
|    0  |  SELECT STATEMENT                                            |                       1 |
|    1  |    QUERY BLOCK ("$QB_IDX_2")                                 |                       1 |
|    2  |      SINGLE CLUSTER                                          | LOCAL/REMOTE          1 |
|    3  |        SELECT STATEMENT                                      |                       1 |
|    4  |          QUERY BLOCK ("$QB_IDX_2")                           |                       1 |
|    5  |            TABLE ACCESS ("LINEITEM" AS _A1)                  |                       1 |
==================================================================================================

     1  -  TARGET : ROUND(SUM( LINEITEM.L_EXTENDEDPRICE * LINEITEM.L_DISCOUNT ),2) AS REVENUE
     2  -  SQL : SELECT /*+ FULL( _A1 ) */ SUM( "_A1"."L_EXTENDEDPRICE" * "_A1"."L_DISCOUNT" ) FROM "PUBLIC"."LINEITEM"@LOCAL AS "_A1" WHERE "_A1"."L_QUANTITY" < :_V0 AND "_A1"."L_DISCOUNT" >= :_V1 AND "_A1"."L_DISCOUNT" <= :_V2 AND "_A1"."L_SHIPDATE" < :_V3 AND "_A1"."L_SHIPDATE" >= :_V4
           TARGET DOMAIN : G1(G1N1) 1 rows, G2(G2N1) 1 rows
           RE-AGGREGATION
             AGGREGATION : SUM( SUM( LINEITEM.L_EXTENDEDPRICE * LINEITEM.L_DISCOUNT ) )
     4  -  TARGET : SUM( _A1.L_EXTENDEDPRICE * _A1.L_DISCOUNT )
     5  -  HASH SHARD ( # 3 ) 
           READ COLUMN : _A1.L_QUANTITY, _A1.L_EXTENDEDPRICE, _A1.L_DISCOUNT, _A1.L_SHIPDATE
           AGGREGATION : SUM( _A1.L_EXTENDEDPRICE * _A1.L_DISCOUNT )
             PHYSICAL FILTER : _A1.L_QUANTITY < :_V0 AND _A1.L_DISCOUNT >= :_V1 AND _A1.L_DISCOUNT <= :_V2 AND _A1.L_SHIPDATE < :_V3 AND _A1.L_SHIPDATE >= :_V4

<<<  end print plan


Elapsed time: 235.62700 ms 


--#################################
--# Report
--#################################

\set timing off;
INSERT INTO TPCH_SF1_REPORT 
       VALUES ( 'SF1_Q06', (:VAR_ELAPSED_TIME__ / 1000), TRUNC( 60 * 60 * 1000 / :VAR_ELAPSED_TIME__, 0 ) );

1 row created.

COMMIT;

Commit complete.

